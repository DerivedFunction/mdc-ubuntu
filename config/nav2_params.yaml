# rtabmap_demos: We add segmented ground and obstacles to voxel_layer of the local costmap and removed scan source.
bt_navigator:
  ros__parameters:
    use_sim_time: true                # Use simulation time if true
    global_frame: map                 # Global reference frame for navigation
    robot_base_frame: camera_base     # Robot's base frame
    odom_topic: /odom                 # Odometry topic
    bt_loop_duration: 10              # Behavior tree loop duration (ms)
    default_server_timeout: 20        # Default timeout for action servers (s)
    wait_for_service_timeout: 1000    # Timeout for waiting for services (ms)
    # 'default_nav_through_poses_bt_xml' and 'default_nav_to_pose_bt_xml' are use defaults:
    # nav2_bt_navigator/navigate_to_pose_w_replanning_and_recovery.xml
    # nav2_bt_navigator/navigate_through_poses_w_replanning_and_recovery.xml
    # They can be set here or via a RewrittenYaml remap from a parent launch file to Nav2.
    plugin_lib_names:                 # List of behavior tree plugin nodes
      - nav2_compute_path_to_pose_action_bt_node
      - nav2_compute_path_through_poses_action_bt_node
      - nav2_smooth_path_action_bt_node
      - nav2_follow_path_action_bt_node
      - nav2_spin_action_bt_node
      - nav2_wait_action_bt_node
      - nav2_assisted_teleop_action_bt_node
      - nav2_back_up_action_bt_node
      - nav2_drive_on_heading_bt_node
      - nav2_clear_costmap_service_bt_node
      - nav2_is_stuck_condition_bt_node
      - nav2_goal_reached_condition_bt_node
      - nav2_goal_updated_condition_bt_node
      - nav2_globally_updated_goal_condition_bt_node
      - nav2_is_path_valid_condition_bt_node
      - nav2_initial_pose_received_condition_bt_node
      - nav2_reinitialize_global_localization_service_bt_node
      - nav2_rate_controller_bt_node
      - nav2_distance_controller_bt_node
      - nav2_speed_controller_bt_node
      - nav2_truncate_path_action_bt_node
      - nav2_truncate_path_local_action_bt_node
      - nav2_goal_updater_node_bt_node
      - nav2_recovery_node_bt_node
      - nav2_pipeline_sequence_bt_node
      - nav2_round_robin_node_bt_node
      - nav2_transform_available_condition_bt_node
      - nav2_time_expired_condition_bt_node
      - nav2_path_expiring_timer_condition
      - nav2_distance_traveled_condition_bt_node
      - nav2_single_trigger_bt_node
      - nav2_goal_updated_controller_bt_node
      - nav2_is_battery_low_condition_bt_node
      - nav2_navigate_through_poses_action_bt_node
      - nav2_navigate_to_pose_action_bt_node
      - nav2_remove_passed_goals_action_bt_node
      - nav2_planner_selector_bt_node
      - nav2_controller_selector_bt_node
      - nav2_goal_checker_selector_bt_node
      - nav2_controller_cancel_bt_node
      - nav2_path_longer_on_approach_bt_node
      - nav2_wait_cancel_bt_node
      - nav2_spin_cancel_bt_node
      - nav2_back_up_cancel_bt_node
      - nav2_assisted_teleop_cancel_bt_node
      - nav2_drive_on_heading_cancel_bt_node
      - nav2_is_battery_charging_condition_bt_node

bt_navigator_navigate_through_poses_rclcpp_node:
  ros__parameters:
    use_sim_time: true                # Use simulation time if true

bt_navigator_navigate_to_pose_rclcpp_node:
  ros__parameters:
    use_sim_time: true                # Use simulation time if true

controller_server:
  ros__parameters:
    use_sim_time: true                # Use simulation time if true
    controller_frequency: 20.0        # Frequency to run the controller (Hz)
    min_x_velocity_threshold: 0.001   # Minimum x velocity to consider as moving
    min_y_velocity_threshold: 0.5     # Minimum y velocity to consider as moving
    min_theta_velocity_threshold: 0.001 # Minimum angular velocity to consider as moving
    failure_tolerance: 0.3            # Allowed tolerance for controller failure
    progress_checker_plugin: "progress_checker" # Plugin for progress checking
    goal_checker_plugins: ["general_goal_checker"] # Plugins for goal checking
    controller_plugins: ["FollowPath"] # Controller plugins to use

    # Progress checker parameters
    progress_checker:
      plugin: "nav2_controller::SimpleProgressChecker" # Progress checker plugin
      required_movement_radius: 0.5    # Minimum movement radius to consider progress (m)
      movement_time_allowance: 10.0    # Time allowed without progress before failure (s)
    # Goal checker parameters
    #precise_goal_checker:
    #  plugin: "nav2_controller::SimpleGoalChecker"
    #  xy_goal_tolerance: 0.25
    #  yaw_goal_tolerance: 0.25
    #  stateful: true
    general_goal_checker:
      stateful: true                   # Keep state between checks
      plugin: "nav2_controller::SimpleGoalChecker" # Goal checker plugin
      xy_goal_tolerance: 0.25          # Position tolerance for reaching goal (m)
      yaw_goal_tolerance: 0.25         # Orientation tolerance for reaching goal (rad)
    # DWB parameters
    FollowPath:
      plugin: "dwb_core::DWBLocalPlanner" # Local planner plugin
      debug_trajectory_details: true   # Output debug info for trajectories
      min_vel_x: -0.5                 # Minimum velocity (m/s). Set to a negative value to allow reversing.
      min_vel_y: 0.0                  # Minimum lateral velocity (m/s)
      max_vel_x: 0.5           # Maximum forward velocity (m/s). A safer speed for tuning.
      max_vel_y: 0.0           # Maximum lateral velocity (m/s)
      max_vel_theta: 0.4       # Maximum angular velocity (rad/s). Lower for smoother turns.
      min_speed_xy: 0.1        # Minimum translational speed (m/s). Set > 0 to avoid in-place rotations.
      max_speed_xy: 0.5        # Maximum translational speed (m/s). A safer speed for tuning.
      min_speed_theta: 0.0     # Minimum angular speed (rad/s)
      # Add high threshold velocity for turtlebot 3 issue.
      # https://github.com/ROBOTIS-GIT/turtlebot3_simulations/issues/75
      acc_lim_x: 1.0           # Maximum forward acceleration (m/s^2). Reduced for smoother starts.
      acc_lim_y: 0.0           # Maximum lateral acceleration (m/s^2)
      acc_lim_theta: 1.5       # Maximum angular acceleration (rad/s^2). Lowered for smoother steering.
      decel_lim_x: -1.0        # Maximum forward deceleration (m/s^2). Reduced for smoother stops.
      decel_lim_y: 0.0         # Maximum lateral deceleration (m/s^2)
      decel_lim_theta: -1.5   # Maximum angular deceleration (rad/s^2). Lowered for smoother steering.
      # Steering angle hardware limits: ±22.5° (see main_control.py, MSC_config)
      vx_samples: 20           # Number of velocity samples in x
      vy_samples: 1            # Number of velocity samples in y (1 for non-holonomic).
      vtheta_samples: 20       # Number of angular velocity samples
      sim_time: 2.5            # Time to simulate trajectories (s). Increased for better planning.
      linear_granularity: 0.05 # Step size for linear simulation (m)
      angular_granularity: 0.025 # Step size for angular simulation (rad)
      transform_tolerance: 0.5 # TF transform tolerance (s). 60s is too high and can hide issues.
      xy_goal_tolerance: 0.25  # Position tolerance for goal (m)
      trans_stopped_velocity: 0.15 # Velocity to consider robot stopped (m/s)
      short_circuit_trajectory_evaluation: true # Stop evaluating if a valid trajectory is found
      stateful: true           # Keep state between runs
      critics: ["RotateToGoal", "Oscillation", "BaseObstacle", "GoalAlign", "PathAlign", "PathDist", "GoalDist"] # List of trajectory critics
      BaseObstacle.scale: 0.02 # Obstacle critic scale
      PathAlign.scale: 32.0    # Path alignment critic scale
      PathAlign.forward_point_distance: 0.5 # Distance for path alignment critic (m)
      GoalAlign.scale: 24.0    # Goal alignment critic scale
      GoalAlign.forward_point_distance: 0.5 # Distance for goal alignment critic (m)
      PathDist.scale: 32.0     # Path distance critic scale
      GoalDist.scale: 24.0     # Goal distance critic scale
      RotateToGoal.scale: 15.0 # Rotate to goal critic scale
      RotateToGoal.slowing_factor: 5.0 # Slowing factor for rotate to goal
      RotateToGoal.lookahead_time: -1.0 # Lookahead time for rotate to goal (s)

local_costmap:
  local_costmap:
    ros__parameters:
      update_frequency: 3.0           # Costmap update frequency (Hz). Lowered to reduce CPU load.
      publish_frequency: 2.0          # Costmap publish frequency (Hz)
      global_frame: odom              # Global frame for costmap
      robot_base_frame: camera_base   # Robot's base frame
      use_sim_time: true              # Use simulation time if true
      rolling_window: true            # Use rolling window for local costmap
      width: 10                       # Width of local costmap (m)
      height: 10                      # Height of local costmap (m)
      resolution: 0.05                # Resolution of costmap (m/cell)
      robot_radius: 0.22              # Robot radius (m)
      track_unknown_space: false      # Track unknown space in costmap
      plugins: ["obstacle_layer", "inflation_layer"] # Costmap plugins

      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer" # Obstacle layer plugin
        observation_sources: pointcloud           # Sources for obstacle data
        pointcloud:
          topic: /cloud_obstacles                # RTAB-Map’s obstacle cloud
          sensor_frame: camera_base              # Sensor frame for pointcloud
          data_type: PointCloud2                 # Data type for pointcloud
          clearing: true                         # Enable clearing obstacles
          marking: true                          # Enable marking obstacles
          max_obstacle_height: 0.5               # Max obstacle height (m)
          min_obstacle_height: 0.05              # Min obstacle height (m)

      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer" # Inflation layer plugin
        inflation_radius: 0.55                  # Inflation radius (m)


global_costmap:
  global_costmap:
    ros__parameters:
      width: 9                        # Width of global costmap (m)
      height: 43                      # Height of global costmap (m)
      resolution: 0.05                # Resolution of costmap (m/cell)
      update_frequency: 1.0           # Costmap update frequency (Hz)
      publish_frequency: 1.0          # Costmap publish frequency (Hz)
      global_frame: map               # Global frame for costmap
      robot_base_frame: camera_base   # Robot's base frame
      use_sim_time: true              # Use simulation time if true
      robot_radius: 0.22              # Robot radius (m)
      resolution: 0.05                # Resolution of costmap (m/cell)
      track_unknown_space: true       # Track unknown space in costmap
      plugins: ["static_layer", "inflation_layer", "obstacle_layer"] # Costmap plugins
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer" # Static layer plugin
        map_subscribe_transient_local: true     # Use transient local QoS for map
        topic: /map                            # RTAB-Map’s occupancy grid
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer" # Inflation layer plugin
        cost_scaling_factor: 3.0               # Cost scaling factor for inflation
        inflation_radius: 0.55                 # Inflation radius (m)
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer" # Obstacle layer plugin
        observation_sources: pointcloud           # Sources for obstacle data
        pointcloud:
          topic: /cloud_obstacles                # RTAB-Map’s obstacle cloud
          sensor_frame: camera_base              # Sensor frame for pointcloud
          data_type: PointCloud2                 # Data type for pointcloud
          clearing: true                         # Enable clearing obstacles
          marking: true                          # Enable marking obstacles
          max_obstacle_height: 0.5               # Max obstacle height (m)
          min_obstacle_height: 0.05              # Min obstacle height (m)
      always_send_full_costmap: true           # Always send full costmap

# map_server:
#   ros__parameters:
#     use_sim_time: true
#     # Overridden in launch by the "map" launch configuration or provided default value.
#     # To use in yaml, remove the default "map" value in the tb3_simulation_launch.py file & provide full path to map below.
#     yaml_filename: ""

# smoother_server:
#   ros__parameters:
#     use_sim_time: true
#     smoother_plugins: ["simple_smoother"]
#     simple_smoother:
#       plugin: "nav2_smoother::SimpleSmoother"
#       tolerance: 1.0e-10
#       max_its: 1000
#       do_refinement: true

behavior_server:
  ros__parameters:
    costmap_topic: local_costmap/costmap_raw      # Topic for local costmap
    footprint_topic: local_costmap/published_footprint # Topic for robot footprint
    cycle_frequency: 10.0                         # Frequency to run behaviors (Hz)
    behavior_plugins: ["spin", "backup", "drive_on_heading", "assisted_teleop", "wait"] # List of behavior plugins
    spin:
      plugin: "nav2_behaviors/Spin"              # Spin behavior plugin
    backup:
      plugin: "nav2_behaviors/BackUp"            # Backup behavior plugin
    drive_on_heading:
      plugin: "nav2_behaviors/DriveOnHeading"    # Drive on heading plugin
    wait:
      plugin: "nav2_behaviors/Wait"               # Wait behavior plugin
    assisted_teleop:
      plugin: "nav2_behaviors/AssistedTeleop"     # Assisted teleop plugin
    global_frame: odom                            # Global frame for behaviors
    robot_base_frame: camera_base                 # Robot's base frame
    transform_tolerance: 0.5                      # TF transform tolerance (s)
    use_sim_time: true                            # Use simulation time if true
    simulate_ahead_time: 2.0                      # Time to simulate ahead (s)
    max_rotational_vel: 1.0                       # Max rotational velocity (rad/s)
    min_rotational_vel: 0.4                       # Min rotational velocity (rad/s)
    rotational_acc_lim: 3.2                       # Rotational acceleration limit (rad/s^2)

robot_state_publisher:
  ros__parameters:
    use_sim_time: true                       # Use simulation time if true

waypoint_follower:
  ros__parameters:
    use_sim_time: true                                      # Use simulation time if true
    loop_rate: 20                                           # Rate to process waypoints (Hz)
    stop_on_failure: false                                  # Stop following on failure
    waypoint_task_executor_plugin: "wait_at_waypoint"       # Plugin for waypoint execution
    wait_at_waypoint:
      plugin: "nav2_waypoint_follower::WaitAtWaypoint"      # Wait at waypoint plugin
      enabled: true                                         # Enable wait at waypoint
      waypoint_pause_duration: 200                          # Pause duration at waypoint (ms)

velocity_smoother:
  ros__parameters:
    use_sim_time: true                  # Use simulation time if true
    smoothing_frequency: 20.0           # Frequency to smooth velocity commands (Hz)
    scale_velocities: False             # Scale velocities to limits
    feedback: "OPEN_LOOP"               # Feedback mode (OPEN_LOOP or CLOSED_LOOP)
    max_velocity: [1.0, 0.0, 1.0]       # Maximum velocities [x, y, theta]
    min_velocity: [-1.0, 0.0, -1.0]     # Minimum velocities [x, y, theta]
    max_accel: [5.0, 0.0, 3.2]          # Maximum accelerations [x, y, theta]
    max_decel: [-5.0, 0.0, -3.2]        # Maximum decelerations [x, y, theta]
    odom_topic: "odom"                  # Odometry topic
    odom_duration: 0.1                  # Odometry duration for smoothing (s)
    deadband_velocity: [0.0, 0.0, 0.0]  # Deadband for velocity commands
    velocity_timeout: 1.0               # Timeout for velocity commands (s)


planner_server:
  ros__parameters:
    expected_planner_frequency: 20.0                # Expected planner frequency (Hz)
    planner_plugins: ["GridBased"]                  # List of planner plugins
    GridBased:
      plugin: "nav2_navfn_planner/NavfnPlanner"     # Grid-based planner plugin
      tolerance: 5.0                                # How far to look ahead in meters
